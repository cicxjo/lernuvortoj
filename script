#!/usr/bin/env php
<?php

/*
 * MIT License
 *
 * Copyright (c) 2023    Cyril Augier <cicxjo@posteo.net>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

declare(strict_types=1);

// Singleton
final class Scraper
{
    private static ?self $instance = null;
    private string $url = 'https://lernu.net/vortaro';
    private array $cookies;
    private string $language;
    private string $word;

    private function __construct()
    {
        $this->cookies = $this->parseCookies($this->fetchCookies());
    }

    public static function getInstance(): self
    {
        if (!self::$instance instanceof self)
            self::$instance = new self();

        return self::$instance;
    }

    public function setLanguage(string $language): self
    {
        $this->language = $language;

        return $this;
    }

    public function setWord(string $word): self
    {
        $this->word = $word;

        return $this;
    }

    private function fetchCookies(): array
    {
        $curlOptions = [
            CURLOPT_URL => $this->url,
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_COOKIELIST => true,
        ];

        $curlHandle = curl_init();
        curl_setopt_array($curlHandle, $curlOptions);
        curl_exec($curlHandle);
        curl_close($curlHandle);

        $httpCode = curl_getinfo($curlHandle, CURLINFO_HTTP_CODE);

        if ($httpCode !== 200) {
            $message = sprintf('Got an HTTP code %s in %s', $httpCode, __METHOD__);
            throw new Exception($message);
        }

        return curl_getinfo($curlHandle, CURLINFO_COOKIELIST);
    }

    /*
     * Netscape cookie format
     *
     * Tab-separated values where:
     *
     *     0. string example.com - the domain name
     *     1. boolean FALSE - include subdomains
     *     2. string /foobar/ - path
     *     3. boolean TRUE - send/receive over HTTPS only
     *     4. number 1462299217 - expires at - seconds since Jan 1st 1970, or 0
     *     5. string person - name of the cookie
     *     6. string daniel - value of the cookie
     *
     * See C libcUrl doc <https://curl.se/libcurl/c/CURLOPT_COOKIELIST.html>
     * and cUrl doc <https://curl.se/docs/http-cookies.html>.
     */
    private function parseCookies(array $rawCookies): array
    {
        $cookies = [];

        foreach($rawCookies as $cookie) {
            $cookie = explode("\t", $cookie);
            $cookies[$cookie[5]] = $cookie[6];
        }

        return $cookies;
    }

    private function fetchResource(): string
    {
        $cookies = $this->cookies;

        $curlOptions = [
            CURLOPT_URL => $this->url,
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_POST => true,
            CURLOPT_COOKIE => sprintf('dictionary=eo|%s', $this->language),
            CURLOPT_COOKIE => 'lang=en',
            CURLOPT_COOKIE => sprintf('%s=%s', 'PHPSESSID', $cookies['PHPSESSID']),
            CURLOPT_COOKIE => sprintf('%s=%s', 'YII_CSRF_TOKEN', $cookies['YII_CSRF_TOKEN']),
            CURLOPT_POSTFIELDS => sprintf('YII_CSRF_TOKEN=%s&DictWords[dictionary]=eo|%s&DictWords[word]=%s',
                $cookies['YII_CSRF_TOKEN'], $this->language, $this->word),
        ];

        $curlHandle = curl_init();
        curl_setopt_array($curlHandle, $curlOptions);
        $resource = curl_exec($curlHandle);
        curl_close($curlHandle);
        $httpCode = curl_getinfo($curlHandle, CURLINFO_HTTP_CODE);

        if ($httpCode !== 200) {
            $message = sprintf('Got an HTTP code %s in %s', $httpCode, __METHOD__);
            throw new Exception($message);
        }

        return $resource;
    }

    private function parse(string $html): array
    {
        $dom = new DOMDocument();
        @$dom->loadHTML($html);

        $wrapperElement = @$dom->getElementById('dictionary-search-results')
                               ->getElementsByTagName('ul')[0];

        foreach ($wrapperElement->getElementsByTagName('li') as $liElement) {
            $word = $liElement->getElementsByTagName('b')[0];

            if ($word && $word->nodeValue === $this->word) {
                $wordStructure = $liElement->getElementsByTagName('span')[0]->nodeValue;
                $translation = $liElement->getElementsByTagName('li')[0]->nodeValue;

                return [$wordStructure, $translation];
            }
        }

        throw new Exception('Unable to find the requested word in the result returned by Lernu!');
    }

    public function execute(): array
    {
        return $this->parse($this->fetchResource());
    }
}

function main(array $argv): void
{
    if (!isset($argv[1])) {
        $errorMessage = sprintf("%s\n", 'No language defined');
        fwrite(STDERR, $errorMessage);
        exit(1);
    }

    $language = $argv[1];
    $message = sprintf("### eo -> %s ###\n", $language);
    fwrite(STDOUT, $message);

    try {
        $scraper = Scraper::getInstance();
    } catch (Exception $e) {
        $errorMessage = sprintf("%s\n", $e->getMessage());
        fwrite(STDERR, $errorMessage);
        exit(2);
    }

    while ($line = fgets(STDIN)) {
        $word = trim($line);
        $scraper->setWord($word)->setLanguage($language);
        try {
            $card = $scraper->execute();
            array_unshift($card, $word);
            $card = join("\t", $card);
            $card = sprintf("%s\n", $card);
            fwrite(STDOUT, $card);
        } catch (Exception $e) {
            $comment = sprintf("# %s: %s\n", $word, $e->getMessage());
            fwrite(STDERR, $comment);
        }
    }

    exit(0);
}

main($argv);
